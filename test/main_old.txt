package main

import (
	"fmt"
	"log"
	"unicode"

	"github.com/jroimartin/gocui"
)

var displayedText string // Stores the text to be displayed in the app_view

const appHeight = 10 // Desired height in lines for the app_view

func main() {
	g, err := gocui.NewGui(gocui.OutputNormal)
	if err != nil {
		log.Panicln(err)
	}
	defer g.Close()

	g.SetManagerFunc(layout)

	// Global Quit Keybindings
	if err := g.SetKeybinding("", gocui.KeyCtrlC, gocui.ModNone, quit); err != nil {
		log.Panicln(err)
	}
	if err := g.SetKeybinding("", gocui.KeyEsc, gocui.ModNone, quit); err != nil {
		log.Panicln(err)
	}

	// Keybindings for text manipulation
	for charCode := 'a'; charCode <= 'z'; charCode++ {
		char := charCode // Capture char for the closure
		if err := g.SetKeybinding("", char, gocui.ModNone, makeCharHandler(char)); err != nil {
			log.Panicln(err)
		}
	}
	if err := g.SetKeybinding("", 'D', gocui.ModNone, handleDuplicate); err != nil {
		log.Panicln(err)
	}
	if err := g.SetKeybinding("", 'X', gocui.ModNone, handleClear); err != nil {
		log.Panicln(err)
	}

	// Keybinding for Backspace
	if err := g.SetKeybinding("", gocui.KeyBackspace, gocui.ModNone, handleBackspace); err != nil {
		log.Panicln(err)
	}
	if err := g.SetKeybinding("", gocui.KeyBackspace2, gocui.ModNone, handleBackspace); err != nil { // For terminals that send Backspace2
		log.Panicln(err)
	}

	if err := g.MainLoop(); err != nil && err != gocui.ErrQuit {
		log.Panicln(err)
	}
}

func layout(g *gocui.Gui) error {
	maxX, _ := g.Size() // Use maxY for overall terminal height if needed for other views

	// Create a view at the top, appHeight lines tall
	v, err := g.SetView("app_view", 0, 0, maxX-1, appHeight-1)
	if err != nil {
		if err != gocui.ErrUnknownView {
			return err
		}
		v.Title = "App View (ESC/Ctrl+C quit; lcase:add; D:dup; X:clr; Backspace:del)" // Updated title
		v.Wrap = true
		v.Editable = false
		v.Autoscroll = true // ENABLED Autoscroll
		// Set initial focus to allow keybindings registered to the view
		if _, err := g.SetCurrentView("app_view"); err != nil {
			return err
		}
	}

	v.Clear()
	fmt.Fprint(v, displayedText) // Write the current text buffer to the view

	return nil
}

func quit(g *gocui.Gui, v *gocui.View) error {
	return gocui.ErrQuit
}

// makeCharHandler creates a handler for appending a character to displayedText
func makeCharHandler(char rune) func(g *gocui.Gui, v *gocui.View) error {
	return func(g *gocui.Gui, v *gocui.View) error {
		if unicode.IsLower(char) {
			displayedText += string(char)
		}
		// No need to explicitly update view here, layout function does it on every loop
		return nil
	}
}

// handleDuplicate duplicates the content of displayedText
func handleDuplicate(g *gocui.Gui, v *gocui.View) error {
	displayedText += displayedText
	return nil
}

// handleClear clears displayedText
func handleClear(g *gocui.Gui, v *gocui.View) error {
	displayedText = ""
	return nil
}

// handleBackspace removes the last character from displayedText
func handleBackspace(g *gocui.Gui, v *gocui.View) error {
	if len(displayedText) > 0 {
		// Safely remove the last character, handling potential multi-byte runes correctly
		// For simplicity, this example assumes single-byte characters or that rune conversion handles it.
		// For robust UTF-8, convert to []rune, slice, then convert back to string.
		runes := []rune(displayedText)
		if len(runes) > 0 {
			displayedText = string(runes[:len(runes)-1])
		}
	}
	return nil
}
